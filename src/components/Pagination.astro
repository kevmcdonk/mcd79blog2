---
export interface Props {
	currentPage: number;
	totalPages: number;
	baseUrl?: string;
	showPageNumbers?: number;
}

const { 
	currentPage, 
	totalPages, 
	baseUrl = '/blog',
	showPageNumbers = 5 
} = Astro.props;

// Calculate which page numbers to show
const getPageNumbers = () => {
	const pages: (number | string)[] = [];
	
	if (totalPages <= showPageNumbers + 2) {
		// Show all pages if total is small
		for (let i = 1; i <= totalPages; i++) {
			pages.push(i);
		}
	} else {
		// Always show first page
		pages.push(1);
		
		// Calculate range around current page
		let start = Math.max(2, currentPage - Math.floor(showPageNumbers / 2));
		let end = Math.min(totalPages - 1, start + showPageNumbers - 1);
		
		// Adjust start if we're near the end
		if (end === totalPages - 1) {
			start = Math.max(2, end - showPageNumbers + 1);
		}
		
		// Add ellipsis after first page if needed
		if (start > 2) {
			pages.push('...');
		}
		
		// Add middle pages
		for (let i = start; i <= end; i++) {
			pages.push(i);
		}
		
		// Add ellipsis before last page if needed
		if (end < totalPages - 1) {
			pages.push('...');
		}
		
		// Always show last page
		pages.push(totalPages);
	}
	
	return pages;
};

const pageNumbers = getPageNumbers();
const prevPage = currentPage > 1 ? currentPage - 1 : null;
const nextPage = currentPage < totalPages ? currentPage + 1 : null;

const getPageUrl = (page: number) => {
	return `${baseUrl}/${page}`;
};
---

<nav class="pagination" aria-label="Pagination Navigation">
	<div class="pagination-container">
		<!-- Previous Button -->
		{prevPage ? (
			<a 
				href={getPageUrl(prevPage)} 
				class="pagination-btn pagination-prev"
				aria-label="Go to previous page"
			>
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<polyline points="15 18 9 12 15 6"></polyline>
				</svg>
				<span>Previous</span>
			</a>
		) : (
			<span class="pagination-btn pagination-prev disabled" aria-hidden="true">
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<polyline points="15 18 9 12 15 6"></polyline>
				</svg>
				<span>Previous</span>
			</span>
		)}
		
		<!-- Page Numbers -->
		<ul class="pagination-numbers">
			{pageNumbers.map((page) => (
				<li>
					{typeof page === 'number' ? (
						page === currentPage ? (
							<span class="pagination-number current" aria-current="page">
								{page}
							</span>
						) : (
							<a 
								href={getPageUrl(page)} 
								class="pagination-number"
								aria-label={`Go to page ${page}`}
							>
								{page}
							</a>
						)
					) : (
						<span class="pagination-ellipsis" aria-hidden="true">
							{page}
						</span>
					)}
				</li>
			))}
		</ul>
		
		<!-- Next Button -->
		{nextPage ? (
			<a 
				href={getPageUrl(nextPage)} 
				class="pagination-btn pagination-next"
				aria-label="Go to next page"
			>
				<span>Next</span>
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<polyline points="9 18 15 12 9 6"></polyline>
				</svg>
			</a>
		) : (
			<span class="pagination-btn pagination-next disabled" aria-hidden="true">
				<span>Next</span>
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<polyline points="9 18 15 12 9 6"></polyline>
				</svg>
			</span>
		)}
	</div>
	
	<!-- Page Info -->
	<div class="pagination-info">
		<span class="text-sm">
			Page {currentPage} of {totalPages}
		</span>
	</div>
</nav>

<style>
	.pagination {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		align-items: center;
		margin: 3rem 0;
	}
	
	.pagination-container {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		flex-wrap: wrap;
		justify-content: center;
	}
	
	.pagination-btn {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.5rem 1rem;
		border: 1px solid var(--gray-800);
		border-radius: 0.5rem;
		background: var(--gray-999);
		color: var(--gray-200);
		font-size: var(--text-sm);
		font-weight: 500;
		text-decoration: none;
		transition: all 0.2s ease;
		cursor: pointer;
	}
	
	.pagination-btn:hover:not(.disabled) {
		border-color: var(--accent-regular);
		color: var(--accent-regular);
		transform: translateY(-2px);
		box-shadow: var(--shadow-sm);
	}
	
	.pagination-btn.disabled {
		opacity: 0.4;
		cursor: not-allowed;
	}
	
	.pagination-btn svg {
		width: 16px;
		height: 16px;
	}
	
	.pagination-numbers {
		display: flex;
		gap: 0.25rem;
		list-style: none;
		padding: 0;
		margin: 0;
	}
	
	.pagination-number,
	.pagination-ellipsis {
		display: flex;
		align-items: center;
		justify-content: center;
		min-width: 2.5rem;
		height: 2.5rem;
		padding: 0.5rem;
		border-radius: 0.5rem;
		font-size: var(--text-sm);
		font-weight: 500;
		text-decoration: none;
		transition: all 0.2s ease;
	}
	
	.pagination-number {
		color: var(--gray-200);
		border: 1px solid transparent;
	}
	
	.pagination-number:hover {
		background: var(--gray-900);
		color: var(--accent-regular);
	}
	
	.pagination-number.current {
		background: var(--accent-regular);
		color: var(--accent-text-over);
		border-color: var(--accent-regular);
		font-weight: 600;
		cursor: default;
	}
	
	.pagination-ellipsis {
		color: var(--gray-400);
		cursor: default;
	}
	
	.pagination-info {
		text-align: center;
		color: var(--gray-300);
		font-size: var(--text-sm);
	}
	
	@media (max-width: 768px) {
		.pagination-btn span {
			display: none;
		}
		
		.pagination-numbers {
			gap: 0.125rem;
		}
		
		.pagination-number,
		.pagination-ellipsis {
			min-width: 2rem;
			height: 2rem;
			font-size: 0.875rem;
		}
	}
	
	/* Dark theme support */
	:root.theme-dark .pagination-btn {
		background: var(--gray-999);
		border-color: var(--gray-800);
	}
	
	:root.theme-dark .pagination-btn:hover:not(.disabled) {
		border-color: var(--accent-dark);
		color: var(--accent-dark);
	}
	
	:root.theme-dark .pagination-number:hover {
		background: var(--gray-900);
		color: var(--accent-dark);
	}
	
	:root.theme-dark .pagination-number.current {
		background: var(--accent-dark);
		border-color: var(--accent-dark);
	}
</style>
